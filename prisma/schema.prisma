// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  name          String?
  emailVerified DateTime?
  image         String?
  id            String    @id @default(cuid())
  username      String?
  displayName   String?
  bio           String?
  location      String?
  email         String    @unique

  accounts      Account[]
  sessions      Session[]
  tweets        Tweet[]
  followers     UserFollowsUser[] @relation(name: "Followers")
  following     UserFollowsUser[] @relation(name: "Following")
  TweetsOnLikes TweetsOnLikes[]
}

model UserFollowsUser {
  id String @id @default(cuid())

  follower   User   @relation(fields: [followerId], references: [id], name: "Followers")
  followerId String

  following   User   @relation(fields: [followingId], references: [id], name: "Following")
  followingId String

  @@unique([followerId, followingId])
}

model Tweet {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  parent    Tweet?   @relation(name: "Replies", fields: [tweetId], references: [id])
  replies   Tweet[]  @relation(name: "Replies")

  user    User    @relation(fields: [userId], references: [id])
  userId  String
  tweetId String?

  likes TweetsOnLikes[]
}

model TweetsOnLikes {
  id String @id @default(cuid())

  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  tweetId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([tweetId, userId])
}
